JAVA:	import java.io.FileWriter;\n\npublic class uroboros {\n\n\tpublic static void main(String[] args) {\n    \n        String c = \"%CCODE%\";\n        String cpp = \"%CPPCODE%\";\n        String java = \"%JAVACODE%\";\n        String python = \"%PYTHONCODE%\";\n        \n        String next = \"\";\n        \n\t\tFileWriter writer = new FileWriter(\"uroboros.py\");\n        writer.write(next);\n        writer.close();\n        \n        Runtime.getRuntime().exec(\"python uroboros.py\")\n\t}\n    \n}\n
C:		#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// Author: itsme86\n// Source: http://www.linuxquestions.org/questions/programming-9/replace-a-substring-with-another-string-in-c-170076/\nchar* replace_str(char *str, char *orig, char *rep)\n{\n\tstatic char buffer[4096];\n\tchar *p;\n\n\tif(!(p = strstr(str, orig)))  // Is 'orig' even in 'str'?\n\t\treturn str;\n\n\tstrncpy(buffer, str, p-str); // Copy characters from 'str' start to 'orig' st$\n\tbuffer[p-str] = '\0';\n\n\tsprintf(buffer+(p-str), \"%s%s\", rep, p+strlen(orig));\n\n\treturn buffer;\n}\n\nchar* generateContent(char* nextLang) {\n    return replace_str(replace_str(replace_str(replace_str(nextLang, \"%CCODE%\", c), \"%CPPCODE%\", cpp), \"%JAVACODE%\", java), \"%PYTHONCODE%\", python);\n}\n\nchar* generateList(int args, char* cmdLine[]) {\n    char buffer[32];\n    strcpy(buffer, cmdLine[1]);\n    if (args > 3) {\n        for (int i = 3; i < args; i++) {\n            strcat(buffer, \" \");\n            strcat(buffer, cmdLine[i]);\n        }\n    }\n    strcat(buffer, cmdLine);\n    return buffer;\n}\n\n// Author: James Bilbrey (bilbrey1@umbc.edu)\n// Usage: ./this firstLang nextLang [otherLangs...]\nint main(int argc,char *argv[]) {\n\n\tsystem(\"rm -f uroboros.*\");\n\t\n\tconst char* c = \"%CCODE%\";\n\tconst char* cpp = \"%CPPCODE%\";\n\tconst char* java = \"%JAVACODE%\";\n\tconst char* python = \"%PYTHONCODE%\";\n    \n    char* langList = generateList(argc, argv);\n\t\n    // The following are generous estimates\n\tchar nextLang[2048];\n    char filename[32];\n    char buildcmd[64];\n    char runcmd[64];\n    \n    strcpy(filename, \"uroboros.\");\n    strcat(filename, argv[2]);\n    \n    if (argv[2] == \"c\") {\n        sprintf(buildcmd, \"g++ -ansi -Wall %s -o uroboros.o\", filename);\n        sprintf(runcmd, \"./uroboros.o %s\", langList);\n    } else if (argv[2] == \"cpp\") {\n        sprintf(buildcmd, \"g++ -ansi -Wall %s -o uroboros.o\", filename);\n        sprintf(runcmd, \"./uroboros.o %s\", langList);\n    } else if (argv[2] == \"java\") {\n        sprintf(buildcmd, \"javac %s\", filename);\n        sprintf(runcmd, \"java uroboros %s\", langList);\n    } else if (argv[2] == \"py\") {\n        sprintf(buildcmd, \"\");\n        sprintf(runcmd, \"python %s %s\", filename, langList);\n    } else {\n        printf(\"Not prepared for language: %s\n\", argv[1]);\n        return 1;\n    }\n    \n    char* next = generateContent(nextLang);\n\t\n    // if the next lang is the starting lang, print what we would have written\n    if (argv[2] == argv[1]) {\n        printf(next);\n        return 0;\n    }\n    \n\tFILE *f = fopen(filename, \"w\");\n\tfprintf(f, next);\n\tfclose(f);\n\t\n\tsystem(buildcmd);\n\tsystem(runcmd);\n\treturn 0;\n}\n
PYTHON:	print \"Hello, world!\"\n\nc = \"%CCODE%\";\ncpp = \"%CPPCODE%\";\njava = \"%JAVACODE%\";\npython = \"%PYTHONCODE%\";\n\n\n
